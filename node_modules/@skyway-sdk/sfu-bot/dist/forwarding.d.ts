import { Event } from '@skyway-sdk/common';
import { Publication } from '@skyway-sdk/core';
export declare class Forwarding {
    readonly configure: ForwardingConfigure;
    readonly originPublication: Publication;
    readonly relayingPublication: Publication;
    state: ForwardingState;
    /** @description [japanese] forwardingが終了された時に発火するイベント */
    readonly onStopped: Event<void>;
    /**@internal */
    constructor(configure: ForwardingConfigure, originPublication: Publication, relayingPublication: Publication);
    get id(): string;
    /**@private */
    _stop(): void;
    /**@internal */
    toJSON(): {
        id: string;
        configure: ForwardingConfigure;
        originPublication: Publication<import("@skyway-sdk/core").LocalStream>;
        relayingPublication: Publication<import("@skyway-sdk/core").LocalStream>;
    };
}
export declare type ForwardingState = 'started' | 'stopped';
export interface ForwardingConfigure {
    maxSubscribers: number;
}
//# sourceMappingURL=forwarding.d.ts.map